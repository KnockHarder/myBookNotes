#+TITLE: 《Java多线程编程实战指南（核心篇）》阅读笔记
#+CATEGORIES: Java
#+AUTHOR: C.Wong
#+EMAIL: channingwong@qq.com
#+DATE: 2019-09-03 Tus
#+KEYWORDS: 多线程编程,java
#+LANGUAGE:  cn-zh
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   /channingwong
#+LINK_HOME: /channingwong
#+XSLT:

* 线程概念
** 进程、线程
- 进程 :: 程序向操作系统申请资源(如内存空间和文件句柄)的基本单位
- 线程 :: 进程中可独立执行的最小单位

一个进程可以包含多个线程，同一个进程中的所有线程共享该进程中的资源，如内存空间、文件句柄等。
** Java中线程的创建
在Java平台中创建一个线程就是创建一个Thread类（或其子类）的实例；运行一个线程实际上就是让Java虚拟机执行其run方法，
使相应的任务处理逻辑代码得以执行，Thread类的start方法的作用是启动相应的线程。

start方法调用结束并不意味着相应线程已经开始运行，这个线程可能稍后才被运行，甚至也可能永远不会被运行。
因为启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器(Scheduler)决定的。

- 创建Java线程 :: Thread类的两个常用构造器是:Thread和Thread(Runnable target)，Thread是线程的抽象，Runnable可以看作是对任务的抽象。
#+BEGIN_SRC java
new Thread(){
    @Override
    public void run() {
        // 执行任务
    }
};
new Thread(new Runnable() {
    @Override
    public void run() {
        // 执行任务
    }
});
#+END_SRC
- 线程不可重复使用 :: 线程属于“一次性用品”，我们不能通过重新调用一个已经运行结束的线程的start方法来使其重新运行。
	      事实上，多次调用同一个Thread实例的start方法会导致其抛出IllegalThreadStateException异常。
- 内存空间分配 :: 首先在Java中，一个线程就是一个对象，对象的创建需要内存空间的分配。
	    与创建其他类型的Java对象所不同的是，Java虚拟机会为每个线程分配调用栈(Call Stack)所需的内存空间。
	    调用栈用于跟踪方法间的调用关系以及Java代码对本地代码(Native Code，通常是C代码)的调用。
	    另外，Java平台中的每个线程可能还有一个内核线程(具体与Java虚拟机的实现有关)与之对应。
	    因此相对来说，创建线程对象比创建其他类型的对象的成本要高一些。
- 执行线程与当前线程 :: Java中的任意一段代码(比如一个方法)总是由确定的线程负责执行的，这个线程就相应地被称为这段代码的执行线程；
	       任意一段代码都可以通过调用Thread.currentThread()来获取这段代码的执行线程，这个线程就被称为当前线程。
** 线程(Thread)的属性
线程的属性包括线程的编号(Id)、名称(Name)、线程类别(Daemon)和优先级(Priority)。
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|  属性    | 类型  |               用途               |只读 |                               说明                                |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|编号(ID)  |long   |用于标识不同的线程，不同的线程拥有|是   |某个编号的线程运行结束后，该编号可能被后续创建的线程使用。不同线程 |
|          |       |不同的编号                        |     |拥有的编号虽然不同，但是这种编号的唯一性只在Java虚拟机的一次运行有 |
|          |       |                                  |     |效。也就是说重启个Java虚拟机(如重启Web服务器)后，某些线程的编号可能|
|          |       |                                  |     |与上次Java虚拟机运行的某个线程的编号一样，因此该属性的值不适合用作 |
|          |       |                                  |     |某种唯一标识，特别是作为数据库中的唯一标识(如主键)                 |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|名称      |String |用于区分不同的线程，默认值与线程的|否   |Java并不禁止我们将不同的线程的名称属性设置为相同的值，尽管如此，设 |
|(Name)    |       |编号有关，默认值的格式为:“Thread- |     |置线程的名称属性有助于代码调试和问题定位                           |
|          |       |线程编号”，如“Thread-0”           |     |                                                                   |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|线程类别  |boolean|值为tnue表示相应的线程为守护线程，|否   |该属性必须在相应线程启动之前设置，即对setDaemon方法的调用必须在对  |
|(Daemon)  |       |否则表示相应的线程为用户线程。该属|     |start方法的调用之前，否则setDaemon方法会抛出                       |
|          |       |性的默认值与相应线程的父线程的该属|     |IllegalThreadStateException异常。负责一些关键任务处理的线程不适宜设|
|          |       |性的值相同                        |     |置为守护线程                                                       |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|优化级    |int    |该属性本质上是给线程调度器的提示，|否   |一般使用默认优先级即可，不恰当地设置该属性值可能导致严重的问题(线程|
|(Priority)|       |用于表示应用程序希望哪个线程能够优|     |饥饿)                                                              |
|          |       |先得以运行。Java定义了1~10的10个优|     |                                                                   |
|          |       |先级，默认值一般为5(表示普通优先级|     |                                                                   |
|          |       |)。对于具体的一个线程而言，其优先 |     |                                                                   |
|          |       |级的默认值与其父线程(创建该线程的 |     |                                                                   |
|          |       |线程)的优先级值相等。             |     |                                                                   |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
- 线程属性的使用 :: 线程的属性除了编号外，其他属性都是可读写的属性，即Thread类提供了相应的get方法和set方法用于读取或者设置相应的属性。
#+BEGIN_SRC java
Thread.currentThread().getName();
#+END_SRC
- 优先级的设定 :: Java线程的优先级属性本质上只是一个给线程调度器的提示信息，以便于线程调度器决定优先调度哪些线程运行。
	    它并不能保证线程按照其优先级高低的顺序运行。另外，Java线程的优先级使用不当或者滥用则可能导致某些线程永远无法得到运行，
	    即产生了线程饥钱(Thread Starvation)。因此，线程的优先级并不是设置得越高越好；
	    一般情况下使用普通优先级即可，即不必设置线程的优先级属性。
- 用户线程与守护线程 :: 按照线程是否会阻止Java虚拟机正常停止，我们可以将Java中的线程分为守护线程(Daemon Thread)和用户线程
	       (User Thread，也称非守护线程)。其中用户线程会阻止Java虚拟机的正常停止，
	       即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止；
	       而守护线程则不会影响Java虚拟机的正常停止，即应用程序中有守护线程在运行也不影响虚拟机的正常停止。
	       因此，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。
** Thread类的常用方法
+------------------+----------------------------------------+--------------------------------------------------------------------+
|       方法       |                  功能                  |                                备注                                |
+------------------+----------------------------------------+--------------------------------------------------------------------+
|static Thread     |返回当前线程，即当前代码的执行线程(对象)|同一段代码在不同时刻对Thread.currentThread的调用,其返回值可能不同   |
|currentThread()   |                                        |                                                                    |
+------------------+----------------------------------------+--------------------------------------------------------------------+
|void run()        |线程的任务处理逻辑                      |该方法是由Java虚拟机直接调用的，一般情况下应用程序不应该调用该方法  |
+------------------+----------------------------------------+--------------------------------------------------------------------+
|void start()      |启动线程                                |该方法的返回并不代表相应的线程已经被启动；一个Thread实例的start方法 |
|                  |                                        |只能够被调用一次，多次调用会抛出异常                                |
+------------------+----------------------------------------+--------------------------------------------------------------------+
|void join()       |等待线程运行结束                        |线程A调用线程B的join方法，那么线程A的运行会被暂停，直到线程B运行结束|
+------------------+----------------------------------------+--------------------------------------------------------------------+
|static void       |使当前线程主动放弃其对处理器的占用，这可|这个方法是不可靠的，该方法被调用时当前线程可能仍然继续运行(视系统当 |
|yield()           |能导致当前线程被暂停                    |前的运行状况而定)                                                   |
+------------------+----------------------------------------+--------------------------------------------------------------------+
|static void       |使当前线程休眠(暂停运行)指定的时间      |                                                                    |
|sleep(long millis)|                                        |                                                                    |
+------------------+----------------------------------------+--------------------------------------------------------------------+
** 线程的层次关系
- 父线程与子线程 :: Java平台中的线程不是孤立的，线程与线程之间总是存在一些联系。假设线程A所执行的代码创建了线程B，
	     那么，习惯上我们称线程B为线程A的子线程，相应地线程A就被称为线程B的父线程。不过Java平台中并没有API用于获取一个线程的父线程，
	     或者获取一个线程的所有子线程。
- 父子线程的Daemon值 :: 默认情况下，父线程是守护线程，则子线程也是守护线程，父线程是用户线程，则子线程也是用户线程。
		  另外，父线程在创建子线程后启动子线程之前可以调用该线程的setDaemon方法，将相应的线程设置为守护线程(或者用户线程)。
- 父子线程的优先级 :: 一个线程的优先级默认值为该线程的父线程的优先级，即如果我们没有设置或者更改一个线程的优先级，
	     那么这个线程的优先级的值与父线程的优先级的值相等。
- 父子线程的生命周期 :: 父线程和子线程之间的生命周期也没有必然的联系。比如父线程运行结束后，子线程可以继续运行，
	       子线程运行结束也不妨碍其父线程继续运行。
- 工作者线程 :: 习惯上，我们也称某些子线程为エ作者线程(Worker Thread)或者后台线程(Background Thread)。
	   工作者线程通常是其父线程创建来用于专门负责某项特定任务的执行的。
	   例如，Java虚拟机中对内存进行回收的线程通常被称为GC工作者线程。
** 线程的生命周期
#+ATTR_HTML: :width 900 :title Java线程的状态
#+CAPTION: Java线程的状态
[[file:LifeCircleOfThreads.jpg]]

Java线程的状态可以使用监控工具査看，也可以通过Thread.getState()调用来获取。
Thread.getState()的返回值类型Thread.State是一个枚举类型，其定义的线程状态包括以下几种：

- NEW :: 一个已创建而未启动的线程处于该状态。由于一个线程实例只能够被启动次，因此一个线程只可能有一次处于该状态。
- RUNNABLE :: 该状态可以被看成一个复合状态，它包括两个子状态：READY和RUNNING。
	      前者表示处于该状态的线程可以被线程调度器(Scheduler)进行调度而使之处于RUNNING状态；
	      后者表示处于该状态的线程正在运行，即相应线程对象的run方法所对应的指令正在由处理器执行。
	      执行Thread.yield()的线程，其状态可能会由RUNNING转换为READY。处于READY子状态的线程也被称为活跃线程。
- BLOCKED :: 一个线程发起一个阻塞式I/O(Blocking I/O)操作后，或者申请一个由其他线程持有的独占资源(比如锁)时，相应的线程会处于该状态，
	     处于Blocked状态的线程并不会占用处理器资源。当阻塞式1O操作完成后，或者线程获得了其申请的资源，
	     该线程的状态又可以转换为RUNNABLE。
- Waiting :: 一个线程执行了某些特定方法之后，就会处于这种等待其他线程执行另外一些特定操作的状态。
	     能够使其执行线程变更为WAITING状态的方法包括：Object.wait()、Thread.join()和LockSupport.park(Object)。
	     能够使相应线程从WAITING变更为RUNNABLE的对应方法包括：Object.notify()、notifyAll()和LockSupport.unpark(Objec)
- TIMED_WAITING :: 该状态和WAITING类似，差别在于处于该状态的线程并非无限制地等待其他线程执行特定操作，而是处于带有时间限制的等待状态。
		   当其他线程没有在指定时间内执行该线程所期望的特定操作时，该线程的状态自动转换为RUNNABLE。
- TERMINATED :: 已经执行结束的线程处于该状态。由于一个线程实例只能够被启动一次，因此一个线程也只可能有一次处于该状态。
		Thread.run()正常返回或者由于抛出异常而提前终止都会导致相应线程处于该状态。
* 多线程编程
** 串行、并发与并行
#+ATTR_HTML: :width 600 :title 串行、并发与并行示意图
#+CAPTION: 串行、并发与并行示意图
[[file:Sequential_Concurrent_Paraller.jpg]]

- 串行(Sequential) :: 先开始做事情A，待其完成之后再开始做事情B，依次类推，直到事情C完成。这实际上顺序逐一完成几件事情，只需要投入一个人。
		    在这种方式下3件事情总共耗时35(15+10+10)分钟。
- 并发(Concurrent) :: 这种方式也可以只投入一个人，这个人先开始做事情A，事情A的准备活动做好后(此时消耗了5分钟)，
		    在等待事情A完成的这段时间内他开始做事情B，为事情B的准备活动花了2分钟之后，在等待事情B完成的这段时间内他开始做事情C，
		    直到10分钟之后事情C完成。这整个过程实际上是以交替的方式利用等待某件事情完成的时间来做其他事情，
		    在这种方式下3件事情总共耗时17(5+2+10)分钟，这比串行方式节约了一半多的时间。
- 并行(Parallel) :: 这种方式需要投入3个人，每个人负责完成其中一件事情，这3个人在同一时刻开始齐头并进地完成这些事情。
		  在这种方式下3件事情总共耗时15分钟(取决于耗时最长的那件事情所需的时间)，比并发的方式节约了2分钟的时间。

并发往往带有部分串行，而并发的极致就是并行。从软件的角度来说，并发就是在一段时间内以交替的方式去完成多个任务，
而并行就是以齐头并进的方式去完成多个任务。

从软件角度讲，要以并发的方式去完成几个任务往往需要借助多个线程(而不是一个线程)。
从硬件的角度来说，在一个处理器一次只能够运行一个线程的情况下，由于处理器可以使用时间片(Time-slice)分配的技术在同一段时间内运行多个线程，
因此一个处理器就可以实现并发。而并行则需要靠多个处理器在同一时刻各自运行一个线程来实现。 

多线程编程的实质就是将任务的处理方式由串行改为并发，即实现并发化，以发挥并发的优势。如果一个任务的处理方式可以由串行改为并发(或者并行)，
那么我们就称这个任务是可并发化(或者可并行化)的。
** 多线程编程中存在的问题
*** 竞态(Race Condition)
- 概念 :: 竞态是指计算的正确性依赖于相对时间顺序或者线程的交错。竞态往往伴随着读取脏数据问题(即读取到一个过时的数据)，
	以及丢失更新问题(即一个线程对数据所做的更新没有体现在后续其他线程对该数据的读取上)。
**** 竞态的出现
#+BEGIN_SRC java
public class Main {
    static class IndexGen {
        private int index;

        int nextIndex() {
            return index++;
        }
    }

    public static void main(String[] args) throws InterruptedException {
        IndexGen indexGen = new IndexGen();
        final int num = 100;
        final int[] visited = new int[num];
        final List<Thread> threads = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            threads.add(new Thread(() -> visited[indexGen.nextIndex()] ++));
        }
        threads.forEach(Thread::start);
        for (Thread thread : threads) {
            thread.join();
        }
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                System.out.printf("%d\t", visited[i * 10 + j]);
            }
            System.out.println();
        }
    }
}
#+END_SRC

参考上述程序，我们创建一百个线程，每次通过IndexGen获取下一个index，并将其访问次数加一。我们期望的结果是每个index都只被访问一次，
但多次运行后，却发现可能出现下面的结果，其中，0,62,85被访问了两次，导致97,98,99未被访问：
#+BEGIN_EXAMPLE
2	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	2	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	2	1	1	1	1	
1	1	1	1	1	1	1	1	1	1	
1	1	1	1	1	1	1	0	0	0
#+END_EXAMPLE

上述例子中，依照nextIndex()方法实现的逻辑，下标总是递增的，因此不同的线程它们所“拿到”的index也不应该相同才对。
但从结果来看，不同线程却“拿到”了重复的index，即nextIndex()所返回的下标值重复了。且如果我们多次重复运行代码，所得到的结果也不完全相同。
这个现象说明，当多个线程在没有采取任何控制措施的情况下并发地更新、读取同一个共享变量时，是不安全的，可能出现意料之外的结果。
**** 出现竞态的原因
上述例子中的 =index++= 看起来像是一个操作，实际上相当于如下3个指令：
#+BEGIN_EXAMPLE
1oad(index,r1);  //指令①:将变量index的值从内存读到寄存器r1
increment(r1);   //指令②:将寄存器r1的值增加1
store(index,r1); /指令③:将奇存器r1的内容写入变量index所对应的内存空间
#+END_EXAMPLE

多个线程在执行上述指定时，可能交错运行上述三个指令，导致三个线程读取到的index值重复，如下表如示：
|    | thread-0                 | thread-1                 | thread-2                 |
|----+--------------------------+--------------------------+--------------------------|
| t1 | 未运行                   | 执行其他操作             | 执行其他操作             |
| t2 | 执行其他操作             | [index=0]执行指令①       | [index=0]执行指令①       |
| t3 | 执行其他操作             | [r1=0]执行指令②          | [r1=0]执行指令②          |
| t4 | [index=0]执行指令①       | [r1=1][index=0]执行指令③ | [r1=1][index=0]执行指令③ |
| t5 | [r1=0]执行指令②          | [index=1]执行其他操作    | [index=1]执行其他操作    |
| t6 | [r1=1][index=0]执行指令③ | 运行结束                 | 运行结束                 |
| t7 | [index=1]执行其他操作    | 运行结束                 | 运行结束                 |

从上述竞态典型实例中我们可以提炼出竞态的两种模式:read-modify-write(读-改-写)和check-then-act(检测-执行)。

- read-modify-write :: 读取个共享变量的值(read)，然后根据该值做一些计算(modify)，接着更新该共享变量的值(write)
- check-then-act :: 读取(read)某个共享变量的值，根据该变量的值(如if语句)决定下一步的动作(act)是什么。
*** 线程安全性(Thread Safety)
- 定义 :: 一般而言，如果一个类在单线程环境下能够运作正常，并且在多线程环境下，如果使用方不必做任何改变的情况下也能运作正常，
	那么我们就称其是线程安全的，相应地我们称这个类具有线程安全性

线程安全问题概括来说表现为三个方面：原子性、可见性和有序性。
*** 原子性(Automicity)
- 定义 :: 原子的字面意思是不可分割的。对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，
	那么该操作就是原子操作，相应地我们称该操作具有原子性。
- 不可分割(Indivisible) :: 其中一个含义是指访问（读、写）某个共享变量的操作从其执行线程以外的任何线程来看，
     该操作要么已经执行结束要么尚未发生，即其他线程不会“看到”该操作执行了部分的中间效果。
     另一个含义是，如果T1和T2是访问共享变量V的两个原子操作，如果这两个操作并非都是读操作，
     那么个线程执行T1期间（开始执行而未执行完毕），其他线程无法执行T2。也就是说，访问同一组共享变量的原子操作是不能够被交错的，
     这就排除了一个线程执行一个操作期间另外一个线程读取或者更新该操作所访问的共享变量而导致的干扰（读脏数据）和冲突（丢失更新）的可能。

总的来说，Java中有两种方式来实现原子性：锁(Lock)和CAS(Compare-And-Swap)指令。
- 锁 :: 锁具有排他性，即它能够保障一个共享变量在任意一个时刻只能够被一个线程访问，
       这就排除了多个线程在同一时刻访问同一个共享变量而导致干扰与冲突的可能，即消除了竞态。
- CAS指令 :: CAS指令实现原子性的方式与锁实现原子性的方式实质上是相同的，差别在于锁通常是在软件这一层次实现的，
	   而CAS是直接在硬件（处理器和内存）这一层次实现的，它可以被看作“硬件锁”。

在Java语言中，long型和double型以外的任何类型的变量的写操作都是原子操作，包括：byte、boolean、short、char、foat、int和引用型变量。

对long/double型变量的写操作由于Java语言规范并不保障其具有原子性，因此在多个线程并发访问同一long/double型变量的情况下，
一个线程可能会读取到其他线程更新该变量的“中间结果”。这是因为Java中的long/double型变量会占用64位的存储空间，
而32位的Java虚拟机对这种变量的写操作可能会被分解为两个步骤来实施，比如先写低32位，再写高32位。
那么，在多个线程试图共享同一个这样的变量时就可能出现一个线程在写高32位的时候，另外一个线程正在写低32位的情形。
*** 可见性(Visibility)
- 定义 :: 在多线程环境下，一个线程对某个共享变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，
	甚至永远也无法读取到这个更新的结果。如果一个线程对某个共享变量进行更新之后，后续访问该变量的线程可以读取到该更新的结果，
	那么我们就称这个线程对该共享变量的更新对其他线程可见，否则我们就称这个线程对该共享变量的更新对其他线程不可见。

多线程程序在可见性方面存在问题意味着某些线程读取到了旧数据(Stale Data)，而这可能导致程序出现我们所不期望的结果。
**** 寄存器和高速缓存带导致的不可见
程序中的变量可能会被分配到寄存器(Register)而不是主内存中进行存储，每个处理器都有其自己的寄存器，
而一个处理器无法读取另外一个处理器上的寄存器中的内容。因此，如果两个线程分别运行在不同的处理器上，
且这两个线程所共享的变量却被分配到寄存器上进行存储，那么可见性问题就会产生。

另外，即便某个共享变量是被分配到主内存中进行存储的，也不能保证该变量的可见性。这是因为处理器对主内存的访问并不是直接访问，
而是通过其高速缓存子系统进行的。一个处理器上运行的线程对变量的更新可能只是更新到该处理器的写缓冲器中，还没有到达该处理器的高速缓存中，
更不用说到主内存中了。而一个处理器的写缓冲器中的内容无法被另外一个处理器读取，
因此运行在另外一个处理器上的线程无法看到这个线程对某个共享变量的更新。

- 缓存一致性协议(Cache Coherence Protocol) :: 通过缓存一致性协议可以让一个处理器来读取其他处理器的高速缓存中的数据，
并将读到的数据更新到该处理器的高速缓存中。这种一个处理器从其自身处理器缓存以外的其他存储部件中读取数据，
并将其更新到该处理器的高速缓存的过程，我们称之为缓存同步。相应地，我们称这些存储部件的内容是可同步的，
可同步的存储部件包括处理器的高速缓存、主内存。

缓存同步使得一个处理器上运行的线程，可以读取到另外一个处理器上运行的线程对共享变量所做的更新，这样在硬件层次上即保障了可见性。

- 冲刷处理器缓存 :: 为了保障可见性，我们必须使一个处理器对共享变量所做的更新最终被写入该处理器的高速缓存或者主内存中
而不是始终停留在其写缓冲器中，这个过程被称为冲刷处理器缓存。

- 刷新处理器缓存 :: 同样，为了保障可见性，一个处理器在读取共享变量的时候，如果其他处理器在此之前已经更新了该变量，
那么该处理器必须从其他处理器的高速缓存或者主内存中，对相应的变量进行缓存同步，这个过程被称为刷新处理器缓存。

**** JIT优化导致的不可见
#+BEGIN_SRC java
public class Main {
    static /**volatile**/ boolean isCanceled = false;

    public static void main(String[] args) throws InterruptedException {
        new Thread(() -> {
            while (!isCanceled) {
                // System.out.println("hello");
            }
        }).start();
        System.out.println("come here");
        Thread.sleep(1000);
        isCanceled = true;
    }
}
#+END_SRC
如果我们运行上述代码，我们会发现主程序永远不会结束，但是如果我们去掉对volatile的注释，那么程序将只运行一秒。

这是JIT优化导致变量不可见的一个十分典型的例子，JIT在优化代码时，可能将isCanceled当做非共享变量处理，
认为isCanceled在当前线程不会发生改变，进而直接使用false代替。另外比较有趣的一点，就是如果我们保持将volatile注释掉的状态，
但是在每次循环中打印一条"hello"语句，那么程序将同样只运行一秒，这从另一个角度JIT优化将为不安全的多线程程序的带来难以预测的结果。


- volatile :: 该关键字所起到的一个作用就是提示JIT编译器被修饰的变量可能被多个线程共享，
以阻止JT编译器做出可能导致程序运行不正常的优化；另外一个作用就是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，
写个 volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障了可见性。

**** Java语言规范(Java Language Specification)中的可见性保证
- Java语言规范保证，父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的
- Java语言规范保证，一个线程终止后，该线程对共享变量的更新对于调用该线程的join方法的线程而言是可见的
**** 需要注意的几个问题
1. 可见性得以保障，并不意味着一个线程能够看到另外一个线程更新的所有变量的值。如果一个线程在某个时刻更新了多个共享变量的值，
   那么此后其他线程再来读取这些变量时，这些线程所读取到的变量值有些是其他线程更新过的值，而有些则可能仍然是其他线程更新之前的值（旧值）。
1. 另一方面，可见性的保障仅仅意味着一个线程能够读取到共享变量的相对新值，而不能保障该线程能够读取到相应变量的最新值。
   - 相对新值 :: 对于一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。
   - 最新值 :: 如果读取共享变量的线程，在读取并使用该变量的时候其他线程无法更新该变量的值，那么该线程读取到的相对新值就被称为该变量的最新值。

   相对新值描述的是一个时效性问题，即如果线程A在成功读取到共享变量x当前最新值的同时，线程B更新了共享变量x，由于读取动作已发生，
   线程A获取的值只能是相对新值，而x的最新值只有在线程A下一次读取x时才会被获取到。
1. 可见性问题是多线程衍生出来的问题，它与程序的目标运行环境是单核处理器还是多核处理器无关。
   也就是说，单处理器系统中实现的多线程编程也可能出现可见性问题：在目标运行环境是单处理器的情况下，
   多线程的并发执行实际上是通过时间片分配实现的。此时，虽然多个线程是运行在同一个处理器上的，
   但是由于在发生上下文切換的时候，一个线程对寄存器变量的修改会被作为该线程的线程上下文保存起来，
   这导致另外一个线程无法“看到”该线程对这个变量的修政，因此，单处理器系统中实现的多线程编程也可能出现可见性问题。
*** 有序性(Ordering)
**** 重排序
- 重排序(Reordering) :: 在多核处理器的环境下，代码的执行顺序可能是没有保障的：编译器可能改变两个操作的先后顺序；
     工处理器可能不是完全依照程序的目标代码所指定的顺序执行指令；另外，在一个处理器上执行的多个操作，
     从其他处理器的角度来看其顺序可能与目标代码所指定的顺序不一致。这种现象就叫作重排序。

重排序是对内存访问有关的操作（读和写）所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。
但是，它可能对多线程程序的正确性产生影响，即它可能导致线程安全问题。

与可见性问题类似，重排序也不是必然出现的。重排序的潜在来源有许多，包括编译器(在Java中指的是JIT编译器)、
处理器和存储子系统（包括写缓冲器、高速缓存）。

为了理解重排序，我们先定义几个顺序：
- 源代码顺序 :: 源代码中所指定的内存访问操作顺序。
- 程序顺序 :: 在给定处理器上运行的目标代码所指定的内存访问操作顺序。尽管Java虚拟机执行代码有两种方式：
	  解释执行（被执行的是字节码）和编译执行（被执行的是机器码），里的目标代码是指字节码。
- 执行顺序 :: 内存访问操作在给定处理器上的实际执行顺序。
- 感知顺序 :: 给定处理器所感知到（看到）的该处理器及其他处理器的内存访问操作发生的顺序。

在此基础上，我们可以将重排序可以分为两类：指令重排序和存储子系统重排序。
+------------+--------------------------------------+--------------------+
| 重排序类型 |              重排序表现              |     重排序来源     |
+------------+--------------------------------------+--------------------+
|指令重排序  |程序顺序与源代码顺序不一致            |JIT编译器           |
|            +--------------------------------------+--------------------+
|            |执行顺序与程序顺序不一致              |JIT编译器、处理器   |
+------------+--------------------------------------+--------------------+
|存储子系统重|源代码顺序、程序顺序和执行顺序这三者保|高速缓存、写缓冲器  |
|排序        |持一致,但是感知顺序与执行顺序不一致   |                    |
+------------+--------------------------------------+--------------------+
**** 指令重排序(Instruction Reorder)
- 定义 :: 在源代码顺序与程序顺序不一致，或者程序顺序与执行顺序不一致的情况下，我们就说发生了指令重排序。
	指令重排序是一种动作，它确确实实地对指令的顺序做了调整，其重排序的对象是指令。

#+BEGIN_SRC java
public class Main {
    private static final Semaphore SEMAPHORE = new Semaphore(Runtime.getRuntime().availableProcessors());
    private int shardValue = 1;
    private Helper helper;

    void createHelper() {
        this.helper = new Helper(shardValue);
    }

    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newCachedThreadPool();
        Map<Integer, AtomicInteger> sumToTimes = new ConcurrentHashMap<>(16);
        Main main = new Main();
        final int size = 200000;
        for (int i = 0; i < size; i++) {
            executorService.submit(() -> {
                try {
                    SEMAPHORE.acquire();
                    main.createHelper();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    SEMAPHORE.release();
                }
            });
            executorService.submit(() -> {
                try {
                    try {
                        SEMAPHORE.acquire();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    main.sum(sumToTimes);
                } finally {
                    SEMAPHORE.release();
                }
            });
        }
        executorService.shutdown();
        executorService.awaitTermination(2000, TimeUnit.MINUTES);
        sumToTimes.forEach((sum, times) -> System.out.printf("%d : %d times %n", sum, times.intValue()));
    }

    private void sum(Map<Integer, AtomicInteger> sumToTimes) {
        int sum;
        final Helper observed = this.helper;
        if (observed == null) {
            sum = -1;
        } else {
            sum = observed.a + observed.b + observed.c + observed.d;
        }
        AtomicInteger atomicInteger = sumToTimes.putIfAbsent(sum, new AtomicInteger(1));
        if (atomicInteger != null) {
            sumToTimes.get(sum).incrementAndGet();
        }
    }

    static class Helper {
        int a;
        int b;
        int c;
        int d;

        Helper(int value) {
            a = b = c = d = value;
        }
    }
}
#+END_SRC

在上述例子中，我们创建了一个Main对象，并不停的给它的成员变量helper赋值，并计算helper的sum值。代码很简单，我们可以预测到输出结果都为4,
只有在helper被赋值之前才可能出现-1,只有这两种输出。但如果我们多次运行程序，就会发现其输出结果包含了 -1~4 之间的所有值。

#+BEGIN_SRC
==== 运行结果一
0 : 1 times 
2 : 3 times 
3 : 3 times 
4 : 199993 times 

==== 运行结果二
1 : 1 times 
3 : 2 times 
4 : 199997 times 

==== 运行结果三
-1 : 2 times 
3 : 1 times 
4 : 199997 times 
#+END_SRC

** 多线程编程的优势和风险
*** 优势
- 提高系统的吞吐率(Throughput) :: 多线程编程使得一个进程中可以有多个并发(Concurrent，即同时进行的)的操作。
     例如，当一个线程因为I/O操作而处于等待时，其他线程仍然可以执行其操作。
- 提高响应性(Responsiveness) :: 在使用多线程编程的情况下，对于GUI软件(如桌面应用程序)而言，
     一个慢的操作(比如从服务器上下载大文件)并不会导致软件的界面出现被“冻住”而无法响应用户的其他操作的现象；
     对于Web应用程序而言，一个请求的处理慢了并不会影响其他请求的处理。
- 充分利用多核(Multicore)处理器资源 :: 如今多核处理器的设备越来越普及，就算是手机这样的消费类设备也普遍使用多核处理器。
     实施恰当的多线程编程有助于我们充分利用设备的多核处理器资源，从而避免了资源浪费。
- 最小化对系统资源的使用 :: 一个进程中的多个线程可以共享其所在进程所申请的资源(如内存空间)，
		 因此使用多个线程相比于使用多个进程进行编程来说，节约了对系统资源的使用。
- 简化程序的结构 :: 线程可以简化复杂应用程序的结构。
*** 风险
- 线程安全(Thread Safe)问题 :: 多个线程共享数据的时候，如果没有采取相应的并发访问控制措施，那么就可能产生数据一致性问题，
     如读取脏数据(过期数据)、丢失更新(某些线程所做的更新被其他线程所做的更新覆盖)等。
- 线程活性(Thread Liveness)问题 :: 一个线程从其创建到运行结束的整个生命周期会经历若干状态。
     从单个线程的角度来看，RUNNABLE状态是我们所期望的状态，但实际上，
     代码编写不当可能导致某些线程一直处于等待其他线程释放锁的状态(BLOCKED状态)，即产生了死锁(Deadlock)。
     另外，线程是一种稀缺的计算资源，一个系统所拥有的处理器数量相比于该系统中存在的线程数量而言总是少之又少的，
     某些情况下可能出现线程饥饿(Starvation)的问题，即某些线程永远无法获取处理器执行的机会而永远处于RUNNABLE状态的READY子状态。
- 上下文切换(Context Switch) :: 处理器从执行一个线程转向执行另外一个线程的时候操作系统所需要做的一个动作被称为上下文切换。
     由于处理器资源的稀缺性，因此上下文切换可以被看作多线程编程的必然副产物，它増加了系统的消耗，不利于系统的吞吐率。
- 可靠性 :: 多线程编程一方面可以有利于可靠性，例如某个线程意外提前终止了，但这并不影响其他线程继续其处理。
	 另一方面，线程是进程的一个组件，它总是存在于特定的进程中的，如果这个进程由于某种原因意外提前终止，
	 比如某个Java进程由于内存泄漏导致Java虚拟机崩溃而意外终止，那么该进程中所有的线程也就随之而无法继续运行。
	 因此，从提高软件可靠性的角度来看，某些情况下可能要考虑多进程多线程的编程方式，而非简单的单进程多线程方式。
