#+TITLE: 《Java多线程编程实战指南（核心篇）》阅读笔记
#+AUTHOR: C.Wong
#+EMAIL: channingwong@qq.com
#+DATE: 2019-09-03 Tus
#+DESCRIPTION:
#+KEYWORDS: 多线程编程 java
#+LANGUAGE:  cn-zh
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   /channingwong
#+LINK_HOME: /channingwong
#+XSLT:

* 多线程概念
** 进程、线程
- 进程 :: 程序向操作系统申请资源(如内存空间和文件句柄)的基本单位
- 线程 :: 进程中可独立执行的最小单位

一个进程可以包含多个线程，同一个进程中的所有线程共享该进程中的资源，如内存空间、文件句柄等。
** Java中线程的创建
在Java平台中创建一个线程就是创建一个Thread类（或其子类）的实例；运行一个线程实际上就是让Java虚拟机执行其run方法，
使相应的任务处理逻辑代码得以执行，Thread类的start方法的作用是启动相应的线程。

start方法调用结束并不意味着相应线程已经开始运行，这个线程可能稍后才被运行，甚至也可能永远不会被运行。
因为启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器(Scheduler)决定的。

- 创建Java线程 :: Thread类的两个常用构造器是:Thread和Thread(Runnable target)，Thread是线程的抽象，Runnable可以看作是对任务的抽象。
#+BEGIN_SRC java
new Thread(){
    @Override
    public void run() {
        // 执行任务
    }
};
new Thread(new Runnable() {
    @Override
    public void run() {
        // 执行任务
    }
});
#+END_SRC
- 线程不可重复使用 :: 线程属于“一次性用品”，我们不能通过重新调用一个已经运行结束的线程的start方法来使其重新运行。
	      事实上，多次调用同一个Thread实例的start方法会导致其抛出IllegalThreadStateException异常。
- 内存空间分配 :: 首先在Java中，一个线程就是一个对象，对象的创建需要内存空间的分配。
	    与创建其他类型的Java对象所不同的是，Java虚拟机会为每个线程分配调用栈(Call Stack)所需的内存空间。
	    调用栈用于跟踪方法间的调用关系以及Java代码对本地代码(Native Code，通常是C代码)的调用。
	    另外，Java平台中的每个线程可能还有一个内核线程(具体与Java虚拟机的实现有关)与之对应。
	    因此相对来说，创建线程对象比创建其他类型的对象的成本要高一些。
- 执行线程与当前线程 :: Java中的任意一段代码(比如一个方法)总是由确定的线程负责执行的，这个线程就相应地被称为这段代码的执行线程；
	       任意一段代码都可以通过调用Thread.currentThread()来获取这段代码的执行线程，这个线程就被称为当前线程。
** 线程(Thread)的属性
线程的属性包括线程的编号(Id)、名称(Name)、线程类别(Daemon)和优先级(Priority)。
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|  属性    | 类型  |               用途               |只读 |                               说明                                |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|编号(ID)  |long   |用于标识不同的线程，不同的线程拥有|是   |某个编号的线程运行结束后，该编号可能被后续创建的线程使用。不同线程 |
|          |       |不同的编号                        |     |拥有的编号虽然不同，但是这种编号的唯一性只在Java虚拟机的一次运行有 |
|          |       |                                  |     |效。也就是说重启个Java虚拟机(如重启Web服务器)后，某些线程的编号可能|
|          |       |                                  |     |与上次Java虚拟机运行的某个线程的编号一样，因此该属性的值不适合用作 |
|          |       |                                  |     |某种唯一标识，特别是作为数据库中的唯一标识(如主键)                 |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|名称      |String |用于区分不同的线程，默认值与线程的|否   |Java并不禁止我们将不同的线程的名称属性设置为相同的值，尽管如此，设 |
|(Name)    |       |编号有关，默认值的格式为:“Thread- |     |置线程的名称属性有助于代码调试和问题定位                           |
|          |       |线程编号”，如“Thread-0”           |     |                                                                   |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|线程类别  |boolean|值为tnue表示相应的线程为守护线程，|否   |该属性必须在相应线程启动之前设置，即对setDaemon方法的调用必须在对  |
|(Daemon)  |       |否则表示相应的线程为用户线程。该属|     |start方法的调用之前，否则setDaemon方法会抛出                       |
|          |       |性的默认值与相应线程的父线程的该属|     |IllegalThreadStateException异常。负责一些关键任务处理的线程不适宜设|
|          |       |性的值相同                        |     |置为守护线程                                                       |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
|优化级    |int    |该属性本质上是给线程调度器的提示，|否   |一般使用默认优先级即可，不恰当地设置该属性值可能导致严重的问题(线程|
|(Priority)|       |用于表示应用程序希望哪个线程能够优|     |饥饿)                                                              |
|          |       |先得以运行。Java定义了1~10的10个优|     |                                                                   |
|          |       |先级，默认值一般为5(表示普通优先级|     |                                                                   |
|          |       |)。对于具体的一个线程而言，其优先 |     |                                                                   |
|          |       |级的默认值与其父线程(创建该线程的 |     |                                                                   |
|          |       |线程)的优先级值相等。             |     |                                                                   |
+----------+-------+----------------------------------+-----+-------------------------------------------------------------------+
- 线程属性的使用 :: 线程的属性除了编号外，其他属性都是可读写的属性，即Thread类提供了相应的get方法和set方法用于读取或者设置相应的属性。
#+BEGIN_SRC java
Thread.currentThread().getName();
#+END_SRC
- 优先级的设定 :: Java线程的优先级属性本质上只是一个给线程调度器的提示信息，以便于线程调度器决定优先调度哪些线程运行。
	    它并不能保证线程按照其优先级高低的顺序运行。另外，Java线程的优先级使用不当或者滥用则可能导致某些线程永远无法得到运行，
	    即产生了线程饥钱(Thread Starvation)。因此，线程的优先级并不是设置得越高越好；
	    一般情况下使用普通优先级即可，即不必设置线程的优先级属性。
- 用户线程与守护线程 :: 按照线程是否会阻止Java虚拟机正常停止，我们可以将Java中的线程分为守护线程(Daemon Thread)和用户线程
	       (User Thread，也称非守护线程)。其中用户线程会阻止Java虚拟机的正常停止，
	       即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止；
	       而守护线程则不会影响Java虚拟机的正常停止，即应用程序中有守护线程在运行也不影响虚拟机的正常停止。
	       因此，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。
