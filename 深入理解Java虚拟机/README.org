#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css"/>
#+OPTIONS: author:nil timestamp:nil

* 运行时数据区域

#+CAPTION: 运行时数据区域
#+attr_html: :width 500px
[[file:runtimeDataBlocks.png]]

** 程序计数器(Program Counter Register)


一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。
在Java虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，
它是程序控制流的指示器，分支、循环、跳转、异常处 理、线程恢复等基础功能都需要依赖这个计数器来完成。

由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，
一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令。
因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，
各线程间计数器互不影响，独立存储，我们称这类内存区域为 *“线程私有”的内存* 。

如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址;
如果正在执行的是本地(Native)方法，这个计数器值则应为空(Undefined)。
此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。

** 虚拟机栈

虚拟机栈也是线程私有的内存，生命周期与线程一致。

虚拟机栈描述的是Java方法执行的线程内存模型:每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧(Stack Frame),
用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，
就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。

栈中的局部变量表存放了编译期可知的各种Java虚拟机基本数据类型(boolean、byte、char、short、int、 float、long、double)、
对象引用(reference类型，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置)
和returnAddress类型(指向了一条字节码指令的地址)。
这些数据类型在局部变量表中的存储空间以局部变量槽(Slot)来表示，
其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。
局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，
在方法运行期间不会改变局部变量表的“大小”。需要注意的是，这里说的“大小”是指变量槽的数量，
但虚拟机真正使用多大的内存空间来实现一个变量槽，这是完全由具体的虚拟机实现自行决定的事情。

在《Java虚拟机规范》中，对这个内存区域规定了两类异常状况:如果线程请求的栈深度大于虚拟机所允许的深度，
将抛出StackOverflowError异常;如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。

** 本地方法栈

与虚拟机线的作用类似，虚拟机栈为虚拟机执行Java方法(也就是字节码)服务，而本地方法栈则是为虚拟机使用到的本地(Native)方法服务。

《Java虚拟机规范》对本地方法栈中方法使用的语言、使用方式与数据结构并没有任何强制规定，
因此具体的虚拟机可以根据需要自由实现它，甚至有的Java虚拟机(譬如Hot-Spot虚拟机)直接就把本地方法栈和虚拟机栈合二为一。

** 堆

堆是Java虚拟机管理的内存中最大的一块。堆被所有线程所共享，在虚拟机启动时创建，它的唯一作用就是存放对名实例，
“几乎所有”的对象实例都在堆中分配内存——现在已有迹象日后可能在栈上分配对象的内存空间。

Java堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC堆”。从内存回收角度看，
由于现代垃圾收集器大部分都是基于分代收集理论设计的，
所以Java堆中经常会出现“新生代”、“老年代”、“永久代”、“Eden空间”、“From Survivor空间”、“To Survivor空间”等名词，
但这些区域划分仅仅是一部分垃圾收集器的共同特性或者说设计风格而已，而非某个Java虚拟机具体实现的固有内存布局，
更不是《Java虚拟机规范》里对Java堆的进一步细致划分。如今，垃圾收集器技术与十年前已不可同日而语，
HotSpot里面也出现了不采用分代设计的新垃圾收集器。从内存分配角度看，
所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区 (Thread Local Allocation Buffer，TLAB)，
以提升对象分配时的效率。将Java 堆细分的目的只是为了更好地回收内存，或者更快地分配内存，并不是固定的模型。

根据《Java虚拟机规范》的规定，Java堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。
但对于大对象(典型的如数组对象)，多数虚拟机实现出于实现简单、存储高效的考虑，很可能会要求连续的内存空间。
Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的(通过参数-Xmx和-Xms设定)。

** 方法区(Method Area)

方法区与堆一样，被各个线程共享，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。
虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作“非堆”(Non-Heap)，目的是与Java堆区分开来。

《Java虚拟机规范》对方法区的约束是非常宽松的，除了和堆一样不需要连续的内存和可以选择固定大小或者可扩展外，甚至还可以选择不实现垃圾收集。
相对而言，垃圾收集行为在这个区域的确是比较少出现的，这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，
一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收有时又确实是必要的。
以前Sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。

*** 运行时常量池(Runtime Constant Pool)

运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，
还有一项信息是常量池表(Constant Pool Table)，用于存放编译期生成的各种字面量与符号引用，
这部分内容将在类加载后存放到方法区的运行时常量池中。

Java虚拟机对于Class文件每一部分(自然也包括常量池)的格式都有严格规定，
如每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、加载和执行，
但对于运行时常量池，《Java虚拟机规范》并没有做任何细节的要求，不同提供商实现的虚拟机可以按照自己的需要来实现这个内存区域，
不过一般来说，除了保存Class文件中描述的符号引用外，还会把由符号引用翻译出来的直接引用也存储在运行时常量池中。

运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，
也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，
这种特性被开发人员利用得比较多的便是String类的intern()方法。

** 直接内存(Direct Memory)

直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。

在JDK 1.4中新加入了NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，
它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。
这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。

这部分本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存(包括物理内存、SWAP分区或者分页文件)大小以及处理器寻址空间的限制，
一般服务器管理员配置虚拟机参数时，会根据实际内存去设置-Xmx等参数信息，但经常忽略掉直接内存，使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制)，
从而导致动态扩展时出现OutOfMemoryError异常。

* HotSpot 虚拟机中的对象

** 对象的创建

#+begin_src plantuml
  @startuml
  : 遇到 new 指令;
  : 在常量池定位对应的类引用符号;
  if (符号引用代表的类是否已被加载、解析、初始化?) then (no)
    : 执行类加载过程;
  endif
  : 为新对象分配内存;
  : 将内存初始化为0;
  : 设置对象头信息;
  @enduml
#+end_src

#+CAPTION: 对象创建流程
#+attr_html: :width 500px
[[file:newObject.png]]

为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来。

假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边， 中间放着一个指针作为分界点的指示器，
那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离， 这种分配方式称为“指针碰撞”(Bump The Pointer)。

但如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，
在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称 为“空闲列表”(Free List)。

选择哪种分配方式由堆是否规整决定，而堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理(Compact)的能力决定。
因此，当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效;而当使用CMS这种基于清除(Sweep)算法的收集器时，
理论上就只能采用较为复杂的空闲列表来分配内存——实际为了能在多数情况下分配得更快，CMS设计了一个叫作Linear Allocat ion Buffer的分配缓冲区，
通过空闲列表拿到一大块分配缓冲区之后，在它里面仍然可以使用指针碰撞方式来分配。

对象创建在虚拟机中是非常频繁的行为，需要解决在维护内存分配信息时的线程安全问题。有两种可选方案:
- 对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性
- 把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在堆中预先分配一小块内存，称为本地线程分配缓冲(Thread Local Allocation Buffer，TLAB)，
哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。虚拟机是否使用TLAB，可以通过-XX:+/-UseTLAB参数来设定。
使用时，内存初始化的工作也可以提前至TLAB分配时顺便进行。

在初始化内存后还要进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码(实际上真正调用Object::hashCode()方法时才计算)、
对象的GC分代年龄等信息。这些信息存放在对象的对象头(Object Header)之中。根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。

*** 对象的 init

在虚拟机创建完对象后，构造函数并没有被执行，因此从 JAVA 程序的视角看，还需要执行构造函数才算造成对象的创建。

一般来说，new指令之后会接着执行 init 方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来
——由字节码流中new指令后面是否跟随invokespecial指令所决定，Java编译器会在遇到new关键字的地方同时生成这两条字节码指令，但如果直接通过其他方式产生的则不一定如此。

** 对象的内存布局

在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)。

*** 对象头

HotSpot虚拟机对象的对象头部分包括两类信息：

第一类是用于存储对象自身的运行时数据，如哈希码(HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，
这部分数据的长度在32位和64位的虚拟机(未开启压缩指针)中分别为32个比特和64个比特，官方称它为“Mark Word”。对象需要存储的运行时数据很多，
其实已经超出了32、64位Bitmap结构所能记录的最大限度，但对象头里的信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，
Mark Word被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间。

例如在32位的HotSpot虚拟机中，对象未被同步锁锁定的状态下，Mark Word的32个比特存储空间中的25个比特用于存储对象哈希码，4个比特用于存储对象分代年龄，
2个比特用于存储锁标志位，1个比特固定为0。各状态下的存储内容如下表。

#+CAPTION: 对象头存储内容
| 存储内容                             | 标志位 | 状态             |
|--------------------------------------+--------+------------------|
| 对象哈希码、对象分代年龄             |     01 | 未锁定           |
| 指向锁记录的指针                     |     00 | 轻量级锁定       |
| 指向重量级锁的指针                   |     10 | 膨胀(重量级锁定) |
| 空，不需要记录信息                   |     11 | GC标记           |
| 偏向线程ID、偏向时间戳、对象分代年龄 |     01 | 可偏向           |
